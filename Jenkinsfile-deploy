pipeline {
  agent {
    label "master"
  }
  parameters {
    choice(name: "STAGE", choices: ["intg", "staging", "prod"], description: "The stage you are building the api for")
  }
  stages {
    stage("Build") {
        agent {
            ecs {
                inheritFrom "transfer-frontend"
            }
        }
        steps {
            sh 'sbt -no-colors graphqlSchemaGen scalastyle assembly'
            stash includes: "Dockerfile", name: "Dockerfile"
            stash includes: "target/scala-2.13/consignmentapi.jar", name: "tdr-consignment-api"
            stash includes: "target/sbt-graphql/schema.graphql", name: "graphql-schema"
        }
    }
    stage("Update generated code") {
        steps {
            build job: 'TDR Graphql Code Generation', parameters: [[$class: 'StringParameterValue', name: 'STAGE', value: params.STAGE]]
        }
    }
    stage("Docker") {
        agent {
            label "master"
        }
        steps {
            unstash "tdr-consignment-api"
            unstash "Dockerfile"
            script {
                docker.withRegistry('', 'docker') {
                    docker.build("nationalarchives/consignment-api:${params.STAGE}").push()
                    slackSend color: "good", message: "The api has been pushed to docker hub", channel: "#tdr"
                }
            }
        }
    }
    stage("Update ECS container") {
        agent {
            ecs {
                inheritFrom "aws"
                taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRJenkinsNodeRole${params.STAGE.capitalize()}"
            }
        }
        steps {
            script {
                def accountNumber = getAccountNumberFromStage()
                sh "python /update_service.py ${accountNumber} ${params.STAGE} consignmentapi"
                slackSend color: "good", message: "The api has been updated in ECS", channel: "#tdr"
            }
        }
    }
  }
}

def getAccountNumberFromStage() {
    def stageToAccountMap = [
            "intg": env.INTG_ACCOUNT,
            "staging": env.STAGING_ACCOUNT,
            "prod": env.PROD_ACCOUNT
    ]

    return stageToAccountMap.get(params.STAGE)
}
